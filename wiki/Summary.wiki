#summary Summary of this project
#labels Featured,Phase-Requirements


= Introduction =

The project will consist in three major applications:

  # A *preliminary version totally virtual*, which will generate tone pulses. Then, this version will also be useful as a virtual implementation, since it will include (hopefully) a 3D world where the four PC's (or in this case, sound sources) will be placed to simulate the distance from the listener with NativeFMOD (or an equivalent library).
  # A second version, *distributed*, a *real-life implementation* of the first version, solving the problem of managing the delays on the communications between different PCs. Positioning will not be implemented yet.
  # The *final version* with *real positioning*. We will have to discuss the positioning method, depending on different factors. This version may not be finished at the end of the project, but it will be anyway scheduled. 
-----
<br>
<br>
<br>
<br>

= Choices =

For API Choices see [choices choices page]
-----
<br>
<br>
<br>
<br>

= Ideas =

  * Keep a global clock, and synchronize using it as timestamps.
  * Try to do the same treatment to sampled and files sounds.
  * Establish the limitations to each layer.
-----
<br>
<br>
<br>
<br>

= Architecture =
<br>
See ProjectArchitecture wiki page.
<br>
<br>

= Interesting Formulas = 

=== Distance delay ===
We assume that sound moves at 343m/s. So sound delay should be a function with distance as parameter:

`delay(x) = x/343 s`

For the different nodes, we'll make as we can see in bibliography:
`TD`,,i,,` = [max(d`,,i=1,..,4,,`) - d`,,i,,`] / 343`

=== Attenuation ===

`Att = 20*log(r2/r1);`

where `r1` is usually 1meter (in speakers). But maybe we can use some reorder, if we know the actual sound amplitude:

`Att = 20*log(r2) - 20*log(r1);`

It might be considered that `r1` doesn't really matters, as we should know the amplitude since it is synthesized *(we should eventually confirm that statement, this is just theory)*, so the formula should be:

`Actual_sound(r) = Initial_Amplitude - 20*log(r);`

So if we want to listen with the initial amplitude the sound in a distance r we should make the sound at source a _20*log(r)_ greater in amplitude.

In documentation we can find this formula, which seems to adjust to our implementation:

`VOL`,,i,,` = VOL`,,Ref,,` - 19.93 log(d`,,i,,` / max(d`,,i = 1,..., 4,,`))`
-----
<br>
<br>
<br>
<br>

= Links =
See [Links links page].