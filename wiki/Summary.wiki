#summary Summary of this project
#labels Featured,Phase-Requirements

= Introduction =

The project will consist in three major applications:

  # A *preliminary version totally virtual*, which will generate tone pulses. Then, this version will also be useful as a virtual implementation, since it will include (hopefully) a 3D world where the four PC's (or in this case, sound sources) will be placed to simulate the distance from the listener with NativeFMOD (or an equivalent library). 

  # A second version, *distributed*, a *real-life implementation* of the first version, solving the problem of managing the delays on the communications between different PCs. Positioning will not be implemented yet. 

  # The *final version* with *real positioning*. We will have to discuss the positioning method, depending on different factors. This version may not be finished at the end of the project, but it will be anyway scheduled. 



= Choices =

For API Choices see [choices choices page]

= Ideas =

  * Keep a global clock, and synchronize using it as timestamps.
  * 

= Interesting Formulas = 

=== Attenuation ===

`Att = 20*log(r2/r1);`

where `r1` is usually 1meter (in speakers). But maybe we can use some reorder, if we know the actual sound amplitude:

`Att = 20*log(r2) - 20*log(r1);`

It might be considered that `r1` doesn't really matters, as we should know the amplitude since it is synthesized *(we should eventually confirm that statement, this is just theory)*, so the formula should be:

`Actual_sound(r) = Initial_Amplitude - 20*log(r);`

So if we want to listen with the initial amplitude the sound in a distance r we should make the sound at source a _20*log(r)_ greater in amplitude.


= Bibliography Links =

  * Java API options (not every API will be used in this project):
    * Java Sound / JMF:
      * [http://www.jsresources.org/ Java resources]
      * [http://www.developer.com/java/other/article.php/2173111 Java Sound Article]
      * [http://today.java.net/cs/user/forum/cs_disc/1298 Java Sound Article]
      * [http://java.sun.com/j2se/1.4.2/docs/guide/sound/programmer_guide/index.html Sun Java Sound Guide]
      * [http://java.sun.com/docs/books/tutorial/sound/index.html Java Sound Tutorial]
      * [http://www.phy.ntnu.edu.tw/ntnujava/index.php?topic=17 Java example on generating sound with Fourier]

    * Other APIs
      * [http://www.tritonus.org Tritonus API]
      * [http://www.javazoom.net/javalayer/javalayer.html JZoom/JLayer]

    * Bindings:
      * [https://joal.dev.java.net/ Java OpenAL]
      * [http://jerome.jouvie.free.fr/Fmod/NativeFmod/index.php NativeFMod]
      * [http://jerome.jouvie.free.fr/Fmod/NativeFmodEx/index.php NativeFmodEx]
    * Real-time Java API
      * [http://en.wikipedia.org/wiki/Javolution Javolution wikipedia page]

    * Sound theory:
      * [http://www.hydrogenaudio.org/forums/ HydrogenAudio Forums]

  * Other Decisions:
    * OS:
      * [http://www.ubuntu.com/products/whatisubuntu/serveredition/ Ubuntu Server Edition]
      * [https://help.ubuntu.com/8.10/serverguide/C/index.html Ubuntu Server Guide]
    * Positioning:
      * [http://en.wikipedia.org/wiki/Real-time_locating Wikipedia RT-Locating Article]
      * [http://www.cs.cmu.edu/~johnny/projects/ Johnny Chung Lee Project Page]